/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./routes/__root"
import { Route as AppLayoutImport } from "./routes/app/_layout"
import { Route as AppLayoutIndexImport } from "./routes/app/_layout/index"

// Create Virtual Routes

const AppImport = createFileRoute("/app")()

// Create/Update Routes

const AppRoute = AppImport.update({
  path: "/app",
  getParentRoute: () => rootRoute,
} as any)

const AppLayoutRoute = AppLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => AppRoute,
} as any)

const AppLayoutIndexRoute = AppLayoutIndexImport.update({
  path: "/",
  getParentRoute: () => AppLayoutRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/app": {
      id: "/app"
      path: "/app"
      fullPath: "/app"
      preLoaderRoute: typeof AppImport
      parentRoute: typeof rootRoute
    }
    "/app/_layout": {
      id: "/app/_layout"
      path: "/app"
      fullPath: "/app"
      preLoaderRoute: typeof AppLayoutImport
      parentRoute: typeof AppRoute
    }
    "/app/_layout/": {
      id: "/app/_layout/"
      path: "/"
      fullPath: "/app/"
      preLoaderRoute: typeof AppLayoutIndexImport
      parentRoute: typeof AppLayoutImport
    }
  }
}

// Create and export the route tree

interface AppLayoutRouteChildren {
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutIndexRoute: AppLayoutIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

export interface FileRoutesByFullPath {
  "/app": typeof AppLayoutRouteWithChildren
  "/app/": typeof AppLayoutIndexRoute
}

export interface FileRoutesByTo {
  "/app": typeof AppLayoutIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/app": typeof AppRouteWithChildren
  "/app/_layout": typeof AppLayoutRouteWithChildren
  "/app/_layout/": typeof AppLayoutIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/app" | "/app/"
  fileRoutesByTo: FileRoutesByTo
  to: "/app"
  id: "__root__" | "/app" | "/app/_layout" | "/app/_layout/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/app"
      ]
    },
    "/app": {
      "filePath": "app",
      "children": [
        "/app/_layout"
      ]
    },
    "/app/_layout": {
      "filePath": "app/_layout.tsx",
      "parent": "/app",
      "children": [
        "/app/_layout/"
      ]
    },
    "/app/_layout/": {
      "filePath": "app/_layout/index.tsx",
      "parent": "/app/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
